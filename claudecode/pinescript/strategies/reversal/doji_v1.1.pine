// âŒ˜ SUMMARY:
// Type: strategy
// Purpose: Core strategy logic for Backtrader conversion
// Key Inputs: Trade direction, daily trend filter, MA trigger settings, SL/TP
// Strategy Logic: Daily trend filter with 3/8 MA crossover entry
// Version: v1.1 - Simplified for Python conversion

//@version=5
strategy(title="Doji Ashi v1.1 Core", overlay=true, initial_capital=500, default_qty_type=strategy.percent_of_equity, default_qty_value=20, margin_long=25, margin_short=25, commission_type=strategy.commission.percent, commission_value=0.02)

// === STRATEGY PARAMETERS === //
trade_direction = input.string("Both", options=["Long", "Short", "Both"], title="Trade Direction")
enable_daily_trend_filter = input.bool(true, title="Use Daily Trend Filter")
trend_mode = input.string("Strict", options=["Strict", "Flexible"], title="Trend Mode")
enable_entry_trigger = input.bool(true, title="Use Entry Trigger")
trigger_ma_type = input.string("EMA", options=["EMA", "ZLEMA", "HULL"], title="MA Type")
entry_mode = input.string("Above/Below", options=["Cross", "Above/Below"], title="Entry Mode")

// === RISK MANAGEMENT === //
atr_length = input.int(14, title="ATR Period")
atr_multiplier = input.float(1.5, title="ATR Multiplier", step=0.1)
risk_reward_ratio = input.float(2.0, title="Risk:Reward Ratio", step=0.1)

// === DAILY TREND CALCULATION === //
daily_close = request.security(syminfo.tickerid, "D", close, lookahead=barmerge.lookahead_on)
daily_sma_20 = request.security(syminfo.tickerid, "D", ta.sma(close, 20), lookahead=barmerge.lookahead_on)
daily_sma_50 = request.security(syminfo.tickerid, "D", ta.sma(close, 50), lookahead=barmerge.lookahead_on)
daily_sma_200 = request.security(syminfo.tickerid, "D", ta.sma(close, 200), lookahead=barmerge.lookahead_on)

// Count SMAs above price
sma_20_pass = daily_close > daily_sma_20
sma_50_pass = daily_close > daily_sma_50
sma_200_pass = daily_close > daily_sma_200
sma_pass_count = (sma_20_pass ? 1 : 0) + (sma_50_pass ? 1 : 0) + (sma_200_pass ? 1 : 0)

// Determine trend direction
daily_uptrend = (trend_mode == "Strict" and sma_pass_count == 3) or (trend_mode == "Flexible" and sma_pass_count >= 2)
daily_downtrend = (trend_mode == "Strict" and sma_pass_count == 0) or (trend_mode == "Flexible" and sma_pass_count <= 1)

// === MA CALCULATION === //
get_ma(src, length) => 
    trigger_ma_type == "EMA" ? ta.ema(src, length) : 
    trigger_ma_type == "ZLEMA" ? 2 * src - src[length] : 
    trigger_ma_type == "HULL" ? ta.wma(2 * ta.wma(src, length / 2) - ta.wma(src, length), int(math.sqrt(length))) : 
    na

ma_3 = get_ma(close, 3)
ma_8 = get_ma(close, 8)

// Entry signals
ema_cross_up = entry_mode == "Cross" ? ta.crossover(ma_3, ma_8) : ma_3 > ma_8
ema_cross_down = entry_mode == "Cross" ? ta.crossunder(ma_3, ma_8) : ma_3 < ma_8

// === ENTRY CONDITIONS === //
long_entry = (not enable_daily_trend_filter or daily_uptrend) and (not enable_entry_trigger or ema_cross_up)
short_entry = (not enable_daily_trend_filter or daily_downtrend) and (not enable_entry_trigger or ema_cross_down)

// === EXIT CALCULATIONS === //
atr_value = ta.atr(atr_length)

// For long positions
long_sl = close - atr_value * atr_multiplier
long_tp = close + (close - long_sl) * risk_reward_ratio

// For short positions  
short_sl = close + atr_value * atr_multiplier
short_tp = close - (short_sl - close) * risk_reward_ratio

// === STRATEGY EXECUTION === //
if long_entry and (trade_direction == "Long" or trade_direction == "Both")
    strategy.entry("Long", strategy.long)
    strategy.exit("Exit Long", "Long", limit=long_tp, stop=long_sl)

if short_entry and (trade_direction == "Short" or trade_direction == "Both")
    strategy.entry("Short", strategy.short)
    strategy.exit("Exit Short", "Short", limit=short_tp, stop=short_sl)