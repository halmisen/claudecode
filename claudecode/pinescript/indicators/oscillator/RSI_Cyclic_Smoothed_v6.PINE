// ⌘ SUMMARY:
// Type: indicator
// Purpose: Enhanced cyclically smoothed RSI with advanced filtering
// Key Inputs: RSI parameters, smoothing settings, filter options
// Outputs: Multi-timeframe RSI, smoothed signals, filter indicators
// Functions: Multi-timeframe calculations, advanced smoothing algorithms
// Logic: Provides enhanced RSI analysis with multiple smoothing techniques and timeframe analysis

// @version=6
indicator("cRSI WITH Div XZ 7.24", overlay=false, max_labels_count=500)

// === cRSI主指标参数 ===
src = close
cycle = input.int(20, minval=10, title="Dominant Cycle Length")
cyclelen = cycle / 2
vibration = 10
leveling = 10.0
cyclicmemory = cycle * 2

// === 背离参数区 ===
overlay_main = input.bool(false, title="叠加在主图(如需画在K线主图，打开此项)")
show_gray_band = input.bool(true, title="显示灰色动态带区间")
show_range_band = input.bool(true, title="显示蓝色动态上下线")
show_crsi_line = input.bool(true, title="显示cRSI主线")

lbR = input.int(5, title="Pivot Lookback Right")
lbL = input.int(5, title="Pivot Lookback Left")
rangeUpper = input.int(60, title="最大背离区间")
rangeLower = input.int(5, title="最小背离区间")
plotBull = input.bool(true, title="显示普通底背离")
plotHiddenBull = input.bool(false, title="显示隐藏底背离")
plotBear = input.bool(true, title="显示普通顶背离")
plotHiddenBear = input.bool(false, title="显示隐藏顶背离")
delay_plot_til_closed = input.bool(false, title="延后至收盘(防止重绘)")
bearColor = input.color(color.red, "顶背离线颜色")
bullColor = input.color(color.green, "底背离线颜色")
hiddenBullColor = input.color(color.new(color.green, 80), "隐藏底背离线")
hiddenBearColor = input.color(color.new(color.red, 80), "隐藏顶背离线")
textColor = color.white
noneColor = color.new(color.white, 100)

// === cRSI主线与动态带计算 ===
up = ta.rma(math.max(ta.change(src), 0), cyclelen)
down = ta.rma(-math.min(ta.change(src), 0), cyclelen)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - 100 / (1 + up / down)
torque = 2.0 / (vibration + 1)
phasingLag = (vibration - 1) / 2.0
var float crsi = na
crsi := torque * (2 * rsi - rsi[phasingLag]) + (1 - torque) * nz(crsi[1])

// 动态上下带
lmax = -999999.0
lmin = 999999.0
for i = 0 to cyclicmemory - 1 by 1
    if nz(crsi[i], -999999.0) > lmax
        lmax := nz(crsi[i])
    if nz(crsi[i], 999999.0) < lmin
        lmin := nz(crsi[i])
mstep = (lmax - lmin) / 100
aperc = leveling / 100

// 下带
var float db = na
for steps = 0 to 100 by 1
    testvalue = lmin + mstep * steps
    below = 0
    for m = 0 to cyclicmemory - 1 by 1
        below := below + (crsi[m] < testvalue ? 1 : 0)
    ratio = below / cyclicmemory
    if ratio >= aperc
        db := testvalue
        break
// 上带
var float ub = na
for steps = 0 to 100 by 1
    testvalue = lmax - mstep * steps
    above = 0
    for m = 0 to cyclicmemory - 1 by 1
        above := above + (crsi[m] >= testvalue ? 1 : 0)
    ratio = above / cyclicmemory
    if ratio >= aperc
        ub := testvalue
        break

// ========== 动态区间/主线绘制 =============
band_lo = plot(db, "LowBand", color=show_range_band ? color.new(color.blue, 0) : na, linewidth=1)
band_hi = plot(ub, "HighBand", color=show_range_band ? color.new(color.blue, 0) : na, linewidth=1)
fill(band_lo, band_hi, color=show_gray_band ? color.new(color.gray, 85) : na)
crsi_main = plot(show_crsi_line ? crsi : na, "cRSI主线", color=color.fuchsia, linewidth=2)

// ========== 背离绘制逻辑复刻万能背离 =========
osc = crsi
pivot_low = ta.pivotlow(osc, lbL, lbR)
pivot_high = ta.pivothigh(osc, lbL, lbR)
plFound = not na(pivot_low)
phFound = not na(pivot_high)
_inRange(cond) =>
    bars = ta.barssince(cond == true)
    rangeLower <= bars and bars <= rangeUpper

// 普通底背离
oscHL = osc[lbR] > ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])
priceLL = low[lbR] < ta.valuewhen(plFound, low[lbR], 1)
bullCond = plotBull and priceLL and oscHL and plFound
plot(plotBull and plFound ? overlay_main ? low[lbR] : osc[lbR] : na, offset=-lbR, title="Bullish Div", linewidth=2, color=(bullCond ? bullColor : noneColor))
label.new(bar_index-lbR, plotBull and bullCond ? (overlay_main ? low[lbR] : osc[lbR]) : na, "Bull", color=bullColor, style=label.style_label_up, textcolor=textColor, size=size.tiny)

// 普通顶背离
oscLH = osc[lbR] < ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])
priceHH = high[lbR] > ta.valuewhen(phFound, high[lbR], 1)
bearCond = plotBear and priceHH and oscLH and phFound
plot(plotBear and phFound ? overlay_main ? high[lbR] : osc[lbR] : na, offset=-lbR, title="Bearish Div", linewidth=2, color=(bearCond ? bearColor : noneColor))
label.new(bar_index-lbR, plotBear and bearCond ? (overlay_main ? high[lbR] : osc[lbR]) : na, "Bear", color=bearColor, style=label.style_label_down, textcolor=textColor, size=size.tiny)

// 隐藏底背离
oscLL = osc[lbR] < ta.valuewhen(plFound, osc[lbR], 1) and _inRange(plFound[1])
priceHL = low[lbR] > ta.valuewhen(plFound, low[lbR], 1)
hiddenBullCond = plotHiddenBull and priceHL and oscLL and plFound
plot(plotHiddenBull and plFound ? overlay_main ? low[lbR] : osc[lbR] : na, offset=-lbR, title="Hidden Bullish", linewidth=2, color=(hiddenBullCond ? hiddenBullColor : noneColor))
label.new(bar_index-lbR, plotHiddenBull and hiddenBullCond ? (overlay_main ? low[lbR] : osc[lbR]) : na, "H Bull", color=hiddenBullColor, style=label.style_label_up, textcolor=textColor, size=size.tiny)

// 隐藏顶背离
oscHH = osc[lbR] > ta.valuewhen(phFound, osc[lbR], 1) and _inRange(phFound[1])
priceLH = high[lbR] < ta.valuewhen(phFound, high[lbR], 1)
hiddenBearCond = plotHiddenBear and priceLH and oscHH and phFound
plot(plotHiddenBear and phFound ? overlay_main ? high[lbR] : osc[lbR] : na, offset=-lbR, title="Hidden Bearish", linewidth=2, color=(hiddenBearCond ? hiddenBearColor : noneColor))
label.new(bar_index-lbR, plotHiddenBear and hiddenBearCond ? (overlay_main ? high[lbR] : osc[lbR]) : na, "H Bear", color=hiddenBearColor, style=label.style_label_down, textcolor=textColor, size=size.tiny)

// ========== END ==========
