//@version=5
indicator("Doji Ashi v2.5 (with SL/TP Levels)", overlay=true)

// === MODE SELECTOR === //
market_type = input.string("Stocks", options=["Stocks", "Crypto"], title="Market Type Preset")

// === INPUT SETTINGS === //
enable_market_filter_input = input.bool(true, "Use Market Trend Filter (SPY/BTC)")
enable_relative_strength_input = input.bool(true, "Use Relative Strength Filter")
enable_daily_trend_filter_input = input.bool(true, "Use Daily Trend Filter (Above SMAs)")
trend_mode = input.string("Strict", options=["Strict", "Flexible"], title="Daily Trend Filter Mode")
enable_volume_filter = input.bool(true, "Use Relative Volume Filter")
enable_time_filter = input.bool(true, "Ignore First Minutes of Market Open")
ignore_hour = input.int(14, "Ignore Start Hour (UTC)", minval=0, maxval=23)
ignore_minute = input.int(30, "Ignore Start Minute (UTC)", minval=0, maxval=59)
ignore_minutes = input.int(30, minval=1, title="Minutes to Ignore")
enable_vwap_filter_entry_input = input.bool(true, "Use VWAP for Entry Filter")
enable_entry_trigger = input.bool(true, "Use Entry Trigger")
trigger_ma_type = input.string("ZLEMA", options=["EMA", "ZLEMA", "HULL"], title="Trigger MA Type")
entry_mode = input.string("Cross", options=["Cross", "Above/Below"], title="3/8 MA Entry Mode")
cooldown_bars = input.int(10, "Cooldown Bars Between Signals", minval=1)

// === SL/TP SETTINGS === //
atrLen = input.int(14, "ATR Length for SL")
atrMult = input.float(1.5, "ATR Multiplier for SL")
tpRR = input.float(2.0, "TP Risk:Reward Ratio")
showSLTP = input.bool(true, "Show SL & TP Lines")
slColor = input.color(color.red, "SL Line Color")
tpColor = input.color(color.green, "TP Line Color")
lineWidth = input.int(2, "Line Width", minval=1, maxval=5)

// === OVERRIDES === //
use_btc_filter = market_type == "Crypto"
use_spy_filter = market_type == "Stocks"
enable_market_filter = use_btc_filter or (use_spy_filter and enable_market_filter_input)
enable_relative_strength = use_spy_filter and enable_relative_strength_input
enable_daily_trend_filter = enable_daily_trend_filter_input
enable_vwap_filter_entry = enable_vwap_filter_entry_input

// === TIME FILTER === //
session_start = timestamp("UTC", year, month, dayofmonth, ignore_hour, ignore_minute)
valid_time = not enable_time_filter or (time >= session_start + ignore_minutes * 60 * 1000)

// === MARKET FILTER === //
spy = request.security("SPY", timeframe.period, close)
spy_sma_20 = request.security("SPY", timeframe.period, ta.sma(close, 20))
btc = request.security("BINANCE:BTCUSDT", timeframe.period, close)
btc_sma_20 = request.security("BINANCE:BTCUSDT", timeframe.period, ta.sma(close, 20))

market_bullish = use_btc_filter ? btc > btc_sma_20 : spy > spy_sma_20
market_bearish = use_btc_filter ? btc < btc_sma_20 : spy < spy_sma_20

// === RELATIVE STRENGTH === //
rel_strength = close / spy
rel_strength_sma = ta.sma(rel_strength, 20)
strong_vs_spy = rel_strength > rel_strength_sma
weak_vs_spy = rel_strength < rel_strength_sma

// === DAILY TREND === //
daily_close = request.security(syminfo.tickerid, "D", close)
daily_sma_20 = request.security(syminfo.tickerid, "D", ta.sma(close, 20))
daily_sma_50 = request.security(syminfo.tickerid, "D", ta.sma(close, 50))
daily_sma_200 = request.security(syminfo.tickerid, "D", ta.sma(close, 200))

sma_pass_count = (daily_close > daily_sma_20 ? 1 : 0) + (daily_close > daily_sma_50 ? 1 : 0) + (daily_close > daily_sma_200 ? 1 : 0)
daily_uptrend = (trend_mode == "Strict" and sma_pass_count == 3) or (trend_mode == "Flexible" and sma_pass_count >= 2)
daily_downtrend = (trend_mode == "Strict" and sma_pass_count == 0) or (trend_mode == "Flexible" and sma_pass_count <= 1)

// === REL VOLUME === //
avg_vol = ta.sma(volume, 20)
high_vol = volume > avg_vol * 1.2

// === VWAP === //
vwap = ta.vwap
above_vwap = close > vwap
below_vwap = close < vwap

// === MA TRIGGER === //
get_ma(src, len) =>
    trigger_ma_type == "EMA" ? ta.ema(src, len) : trigger_ma_type == "ZLEMA" ? 2 * src - src[len] : trigger_ma_type == "HULL" ? ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), int(math.sqrt(len))) : na

ma3 = get_ma(close, 3)
ma8 = get_ma(close, 8)

trigger_up = entry_mode == "Cross" ? ta.crossover(ma3, ma8) : ma3 > ma8
trigger_down = entry_mode == "Cross" ? ta.crossunder(ma3, ma8) : ma3 < ma8

// === COOLDOWN LOGIC === //
var int lastLongBar = na
var int lastShortBar = na

long_ok = na(lastLongBar) or bar_index - lastLongBar > cooldown_bars
short_ok = na(lastShortBar) or bar_index - lastShortBar > cooldown_bars

// === FINAL CONDITIONS === //
long_cond = long_ok and (not enable_market_filter or market_bullish) and (not enable_relative_strength or strong_vs_spy) and (not enable_daily_trend_filter or daily_uptrend) and (not enable_volume_filter or high_vol) and valid_time and (not enable_vwap_filter_entry or above_vwap) and (not enable_entry_trigger or trigger_up)
short_cond = short_ok and (not enable_market_filter or market_bearish) and (not enable_relative_strength or weak_vs_spy) and (not enable_daily_trend_filter or daily_downtrend) and (not enable_volume_filter or high_vol) and valid_time and (not enable_vwap_filter_entry or below_vwap) and (not enable_entry_trigger or trigger_down)

if long_cond
    lastLongBar := bar_index
if short_cond
    lastShortBar := bar_index

// === PLOTS === //
plotshape(long_cond, title="Long", style=shape.labelup, location = location.belowbar, color=color.green, text="BUY", textcolor=color.white)
plotshape(short_cond, title="Short", style=shape.labeldown, location = location.abovebar, color=color.red, text="SELL", textcolor=color.white)
plot(vwap, "VWAP", color=color.orange)

// === SL/TP === //
atr = ta.atr(atrLen)
bullSL = close - atr * atrMult
bullTP = close + (close - bullSL) * tpRR
bearSL = close + atr * atrMult
bearTP = close - (bearSL - close) * tpRR

if showSLTP and long_cond
    line.new(bar_index + 2 , bullSL, bar_index + 12, bullSL, color=slColor, width=lineWidth)
    line.new(bar_index + 2, bullTP, bar_index + 12, bullTP, color=tpColor, width=lineWidth)
    label.new(bar_index + 12, bullSL, "SL", style = label.style_label_left, color = slColor, textcolor = color.white, size = size.tiny)
    label.new(bar_index + 12, bullTP, "TP", style = label.style_label_left, color = tpColor, textcolor = color.white, size = size.tiny)
if showSLTP and short_cond
    line.new(bar_index + 2, bearSL, bar_index + 12, bearSL, color=slColor, width=lineWidth)
    line.new(bar_index + 2, bearTP, bar_index + 12, bearTP, color=tpColor, width=lineWidth)
    label.new(bar_index + 12, bearSL, "SL", style = label.style_label_left, color = slColor, textcolor = color.white, size = size.tiny)
    label.new(bar_index + 12, bearTP, "TP", style = label.style_label_left, color = tpColor, textcolor = color.white, size = size.tiny)
