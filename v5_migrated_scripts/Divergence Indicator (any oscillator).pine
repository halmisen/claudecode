//@version=5
indicator(title="Divergence Indicator (any oscillator) v5", format=format.price, overlay=true)

// A modification of the TV builtin "Diverence indicator" (Version 10) that can be applied to any indicator, and can be plotted on price as well.
// Usage:
// Add your favorite oscilator, klinger, tsi, whatever to a chart.
// Click the little ... (More)
// Then add this indicator "Divergence Indicator (any oscillator)" on your oscillator of choice.
// Click the settings on this indicator and make sure the source is set to the right plot from your oscillator.
// Watch for it to plot divergences...
// Add it a second time on the price chart (and select the same indicator), but check the box "plot on price (rather than on indicator)""
// See you divergence plotted on price and on indicator

bool_overlay_main = input.bool(false, title="Plot on price (rather than on indicator)")
source_osc = input.source(ohlc4, title="Indicator")
int_lbR = input.int(5, title="Pivot Lookback Right")
int_lbL = input.int(5, title="Pivot Lookback Left")
int_rangeUpper = input.int(60, title="Max of Lookback Range")
int_rangeLower = input.int(5, title="Min of Lookback Range")
bool_plotBull = input.bool(true, title="Plot Bullish")
bool_plotHiddenBull = input.bool(false, title="Plot Hidden Bullish")
bool_plotBear = input.bool(true, title="Plot Bearish")
bool_plotHiddenBear = input.bool(false, title="Plot Hidden Bearish")
bool_delay_plot_til_closed = input.bool(false, title="Delay plot until candle is closed (don't repaint)")

color_bearColor = color.red
color_bullColor = color.green
color_hiddenBullColor = color.new(color.green, 80)
color_hiddenBearColor = color.new(color.red, 80)
color_textColor = color.white
color_noneColor = color.new(color.white, 100)

bool_repaint = (not(bool_delay_plot_til_closed) or barstate.ishistory or barstate.isconfirmed)

bool_plFound = not na(ta.pivotlow(source_osc, int_lbL, int_lbR))
bool_phFound = not na(ta.pivothigh(source_osc, int_lbL, int_lbR))

_inRange(cond) =>
	bars = ta.barssince(cond)
	int_rangeLower <= bars and bars <= int_rangeUpper

//------------------------------------------------------------------------------
// Regular Bullish
// Osc: Higher Low
float_oscHL = source_osc[int_lbR] > ta.valuewhen(bool_plFound, source_osc[int_lbR], 1) and _inRange(bool_plFound[1])

// Price: Lower Low
float_priceLL = low[int_lbR] < ta.valuewhen(bool_plFound, low[int_lbR], 1)
bool_bullCond = bool_plotBull and float_priceLL and float_oscHL and bool_plFound and bool_repaint

plot(
     bool_plFound ? (bool_overlay_main ? low[int_lbR] : source_osc[int_lbR]) : na,
     offset=-int_lbR,
     title="Regular Bullish",
     linewidth=2,
     color=(bool_bullCond ? color_bullColor : color_noneColor)
     )

plotshape(
	 bool_bullCond ? (bool_overlay_main ? low[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Regular Bullish Label",
	 text=" Bull ",
	 style=shape.labelup,
	 location=location.absolute,
	 color=color_bullColor,
	 textcolor=color_textColor
	 )

//------------------------------------------------------------------------------
// Hidden Bullish
// Osc: Lower Low
float_oscLL = source_osc[int_lbR] < ta.valuewhen(bool_plFound, source_osc[int_lbR], 1) and _inRange(bool_plFound[1])

// Price: Higher Low
float_priceHL = low[int_lbR] > ta.valuewhen(bool_plFound, low[int_lbR], 1)
bool_hiddenBullCond = bool_plotHiddenBull and float_priceHL and float_oscLL and bool_plFound and bool_repaint

plot(
	 bool_plFound ? (bool_overlay_main ? low[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Hidden Bullish",
	 linewidth=2,
	 color=(bool_hiddenBullCond ? color_hiddenBullColor : color_noneColor)
	 )

plotshape(
	 bool_hiddenBullCond ? (bool_overlay_main ? low[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Hidden Bullish Label",
	 text=" H Bull ",
	 style=shape.labelup,
	 location=location.absolute,
	 color=color_bullColor,
	 textcolor=color_textColor
	 )

//------------------------------------------------------------------------------
// Regular Bearish
// Osc: Lower High
float_oscLH = source_osc[int_lbR] < ta.valuewhen(bool_phFound, source_osc[int_lbR], 1) and _inRange(bool_phFound[1])

// Price: Higher High
float_priceHH = high[int_lbR] > ta.valuewhen(bool_phFound, high[int_lbR], 1)
bool_bearCond = bool_plotBear and float_priceHH and float_oscLH and bool_phFound and bool_repaint

plot(
	 bool_phFound ? (bool_overlay_main ? high[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Regular Bearish",
	 linewidth=2,
	 color=(bool_bearCond ? color_bearColor : color_noneColor)
	 )

plotshape(
	 bool_bearCond ? (bool_overlay_main ? high[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Regular Bearish Label",
	 text=" Bear ",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=color_bearColor,
	 textcolor=color_textColor
	 )

//------------------------------------------------------------------------------
// Hidden Bearish
// Osc: Higher High
float_oscHH = source_osc[int_lbR] > ta.valuewhen(bool_phFound, source_osc[int_lbR], 1) and _inRange(bool_phFound[1])

// Price: Lower High
float_priceLH = high[int_lbR] < ta.valuewhen(bool_phFound, high[int_lbR], 1)
bool_hiddenBearCond = bool_plotHiddenBear and float_priceLH and float_oscHH and bool_phFound and bool_repaint

plot(
	 bool_phFound ? (bool_overlay_main ? high[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Hidden Bearish",
	 linewidth=2,
	 color=(bool_hiddenBearCond ? color_hiddenBearColor : color_noneColor)
	 )

plotshape(
	 bool_hiddenBearCond ? (bool_overlay_main ? high[int_lbR] : source_osc[int_lbR]) : na,
	 offset=-int_lbR,
	 title="Hidden Bearish Label",
	 text=" H Bear ",
	 style=shape.labeldown,
	 location=location.absolute,
	 color=color_bearColor,
	 textcolor=color_textColor
	 )
