---
description: 
globs: 
alwaysApply: false
---
# PineScript v5 Golden Rulebook V1.1 ðŸ“œ

## Version Note
- **V1.0** is the original community version.
- **V1.1** includes practical enhancements for plotting, masking, and code clarity (see comments and bold notes).

---

## Foundational Principles

### Code Structure & Naming Conventions
- **Variable Prefixes**: Use type indicators  
  - `float_`: Floating-point numbers  
  - `int_`: Integers  
  - `bool_`: Booleans  
  - `string_`: Strings  
  - `color_`: Colors  
- **Naming Style**:  
  - Use camelCase for variables and functions  
  - Names must indicate purpose and type  

### Type Safety & Performance

#### Function Guidelines
- Limit custom functions to 3â€“5 parameters  
- Use single-line function declarations  
- Always use `=>` on the same line as the function declaration  
- Return types must be explicitly declared  
- **Parameter limit does NOT apply to built-in functions**

#### Input Validation
```pinescript
// Validate inputs to prevent errors
bool validateInput(float input) => 
    not na(input) and 
    input != float.POSITIVE_INFINITY and 
    input != float.NEGATIVE_INFINITY and 
    math.abs(input) < 1000000
```

### Optimization Techniques
- Cache expensive calculations  
- Use efficient conditionals  
- Avoid redundant operations  
- Minimize `request.security` calls  

---

## Best Practices

### Conditional Statements

**Correct:**
```pinescript
float value = condition ? trueValue : falseValue
```

**Incorrect:**
```pinescript
// No multi-line ternary with backslashes or colons
float value = condition ?
    trueValue :
    falseValue
```

- For loops and if-else blocks can be multi-line  
- All other statements should be single-line where possible  

### Variable Declaration

- Use `const` for true constants  
- Use `var` for persistent series values  

---

### Plotting & Visualization

- Use color transparency for overlays  
- Avoid duplicate plot operations  
- Optimize drawing/plotting logic  

**V1.1 ADDITIONS:**
- **Main series (MAs, close, price lines, etc.) must be plotted directlyâ€”never masked by isValid/global booleans or combined masking. Only use `na` for natural missing data.**
    - Example: `plot(floatEma01, ...)`
- **Event/signal markers may use boolean/`na` masking (e.g., `plot(boolSignal ? price : na, ...)`).**
- **Never use `offset` or `trackprice` for dynamic lines (MAs, price, etc.). Only use these for static reference lines (e.g., Fibonacci).**
- **Never merge multiple series into a single masking condition. Each plot should manage its own mask logic.**
- **Never use `var` to make main series persistent for plotting. Main lines must update each bar.**

#### Fibonacci Line Golden Rule (Only for static/Fibonacci/reference lines)
- Fibonacci lines **must** use `plot` with a static price level (`float`, same value for all bars).
- The `plot` statement **must** include `trackprice=true`, `offset=-9999`, and `style=plot.style_line`.
- Do **not** use `var` to lock the interval, or `line.new`, `plot.style_linebr`, etc.
- Reference example:
```pinescript
plot(boolShowFibo ? floatFibo1 : na, color=colorFiboMain1, linewidth=intMainWidth, style=plot.style_line, trackprice=true, offset=-9999, title="Fibo 1")
```
- **Important: For non-static lines (MAs, price, signals), never use offset or trackprice.**

---

## Error Prevention

### Prevent Common Pitfalls
- Explicit type casting  
- Zero tolerance for implicit conversions  
- Implement validation guards  
- Safe division methods  
```pinescript
float safeDivide(float num, float denom, float defaultValue) =>
    denom != 0.0 ? num / denom : defaultValue
```

---

## Advanced Techniques

### Dynamic Calculations
- Adaptive parameter calculation  
- Normalized volatility measurements  
- Trend strength detection  

---

## Key Takeaways

1. Always declare types explicitly  
2. Prioritize performance and readability  
3. Use single-line function and conditional syntax (except for control structures)  
4. Implement robust input validation  
5. Optimize memory and computation usage  
6. **Never mask main dynamic series (price, MA, etc.) with unrelated booleans or `na`**  
7. **Only use plot masking for signal events or truly unavailable data**
8. **Never mix plotting parameters between static lines (Fibonacci/reference) and dynamic lines (price, MA, etc.)**

**Remember:**  
Clean, efficient, and predictable code is the ultimate goal!
