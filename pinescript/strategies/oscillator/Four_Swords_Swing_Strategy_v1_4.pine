// @version=5
strategy("Four Swords Swing Strategy v1.4", shorttitle="4S v1.4", overlay=true, 
         initial_capital=500, default_qty_type=strategy.percent_of_equity, 
         default_qty_value=20, commission_type=strategy.commission.percent, 
         commission_value=0.02)

// ⌘ SUMMARY:
// Type: strategy
// Purpose: Simplified swing strategy based on proven SQZMOM+WaveTrend combination with enhanced filters
// Key Inputs: SQZMOM parameters, WaveTrend settings, EMA trend filter, volume confirmation
// Key Outputs: High-quality swing signals with state management exits, 75%+ win rate target
// Functions: SQZMOM calculations, WaveTrend confirmation, trend filtering, state management
// Logic: Based on successful SQZMOM_WaveTrend_Strategy.pine with additional swing-specific enhancements

// === 输入参数 ===

// --- SQZMOM 核心参数 ---
int_bbLength = input.int(20, title="BB Length", group="Squeeze Momentum")
float_bbMult = input.float(2.0, title="BB Multiplier", group="Squeeze Momentum")
int_kcLength = input.int(20, title="KC Length", group="Squeeze Momentum")
float_kcMult = input.float(1.5, title="KC Multiplier", group="Squeeze Momentum")
bool_useTrueRange = input.bool(true, title="Use True Range (KC)", group="Squeeze Momentum")

// --- WaveTrend 参数 ---
int_n1 = input.int(10, "WT Channel Length", group="WaveTrend Filter")
int_n2 = input.int(21, "WT Average Length", group="WaveTrend Filter")

// --- 波段增强过滤器 ---
bool_useEMAFilter = input.bool(true, "Use EMA Trend Filter", group="Swing Filters")
int_emaFast = input.int(20, "EMA Fast", group="Swing Filters")
int_emaSlow = input.int(50, "EMA Slow", group="Swing Filters")
bool_useVolumeFilter = input.bool(true, "Use Volume Filter", group="Swing Filters")
float_volumeMultiplier = input.float(1.2, "Volume Multiplier", step=0.1, group="Swing Filters")

// --- 策略设置 ---
string_tradeDirection = input.string("Both", title="Trade Direction", options=["Long Only", "Short Only", "Both"], group="Strategy Settings")
bool_useConfirmedSignal = input.bool(false, title="Use Delayed Confirmed Signal", tooltip="Wait 1 bar to confirm signal", group="Strategy Settings")

// === 核心计算 ===

// --- SQZMOM 计算 (基于成功策略) ---
float_source = close
float_basis = ta.sma(float_source, int_bbLength)
float_dev = float_bbMult * ta.stdev(float_source, int_bbLength)
float_upperBB = float_basis + float_dev
float_lowerBB = float_basis - float_dev

float_ma = ta.sma(float_source, int_kcLength)
float_kcRange = bool_useTrueRange ? ta.tr : (high - low)
float_rangema = ta.sma(float_kcRange, int_kcLength)
float_upperKC = float_ma + float_rangema * float_kcMult
float_lowerKC = float_ma - float_rangema * float_kcMult

bool_sqzOn = (float_lowerBB > float_lowerKC) and (float_upperBB < float_upperKC)
bool_sqzOff = (float_lowerBB < float_lowerKC) and (float_upperBB > float_upperKC)
bool_noSqz = not bool_sqzOn and not bool_sqzOff

// Momentum计算 (LazyBear方法)
float_momentum = ta.linreg(float_source - math.avg(math.avg(ta.highest(high, int_kcLength), ta.lowest(low, int_kcLength)), ta.sma(close, int_kcLength)), int_kcLength, 0)

// --- WaveTrend 计算 (基于成功策略) ---
float_ap = hlc3
float_esa = ta.ema(float_ap, int_n1)
float_d = ta.ema(math.abs(float_ap - float_esa), int_n1)
float_ci = (float_ap - float_esa) / (0.015 * float_d)
float_tci = ta.ema(float_ci, int_n2)

float_wt1 = float_tci
float_wt2 = ta.sma(float_wt1, 4)

// --- 波段增强过滤器 ---

// EMA趋势过滤
float_emaFastLine = ta.ema(close, int_emaFast)
float_emaSlowLine = ta.ema(close, int_emaSlow)
bool_emaBullTrend = bool_useEMAFilter ? (float_emaFastLine > float_emaSlowLine) : true
bool_emaBearTrend = bool_useEMAFilter ? (float_emaFastLine < float_emaSlowLine) : true

// 成交量过滤
float_avgVolume = ta.sma(volume, 20)
bool_volumeConfirm = bool_useVolumeFilter ? (volume > float_avgVolume * float_volumeMultiplier) : true

// === 信号逻辑 ===

// --- 基础SQZMOM信号 (基于成功策略) ---
bool_blackCross_raw = bool_sqzOn[1] and not bool_sqzOn
bool_signalBar_raw = bool_blackCross_raw and not bool_noSqz

bool_blackCross = bool_useConfirmedSignal ? bool_blackCross_raw[1] : bool_blackCross_raw
bool_signalBar = bool_useConfirmedSignal ? bool_signalBar_raw[1] : bool_signalBar_raw

// --- 基础入场信号 ---
bool_basicLongSignal = bool_signalBar and float_momentum > 0 and float_wt1 > float_wt2
bool_basicShortSignal = bool_signalBar and float_momentum < 0 and float_wt1 < float_wt2

// --- 波段增强信号 (加入趋势和成交量过滤) ---
bool_swingLongSignal = bool_basicLongSignal and bool_emaBullTrend and bool_volumeConfirm
bool_swingShortSignal = bool_basicShortSignal and bool_emaBearTrend and bool_volumeConfirm

// --- 最终过滤信号 ---
bool_longSignalFiltered = (string_tradeDirection != "Short Only") and bool_swingLongSignal
bool_shortSignalFiltered = (string_tradeDirection != "Long Only") and bool_swingShortSignal

// --- 状态跟踪 (基于成功策略的状态管理) ---
var bool bool_waitLongExitBySqueeze = false
var bool bool_waitShortExitBySqueeze = false

// 决定退出条件类型
if (bool_longSignalFiltered and strategy.position_size == 0)
    bool_waitLongExitBySqueeze := (float_momentum > float_momentum[1])  // 动量加速时等待压缩退出

if (bool_shortSignalFiltered and strategy.position_size == 0)
    bool_waitShortExitBySqueeze := (float_momentum < float_momentum[1])  // 动量加速时等待压缩退出

// --- 退出信号 ---
// 动量减弱退出
bool_exitLongWeak = strategy.position_size > 0 and not bool_waitLongExitBySqueeze and (float_momentum < 0)
bool_exitShortWeak = strategy.position_size < 0 and not bool_waitShortExitBySqueeze and (float_momentum > 0)

// 新压缩退出
bool_squeezeBackIn = bool_sqzOn and not bool_sqzOn[1]
bool_exitLongSqueeze = strategy.position_size > 0 and bool_waitLongExitBySqueeze and bool_squeezeBackIn
bool_exitShortSqueeze = strategy.position_size < 0 and bool_waitShortExitBySqueeze and bool_squeezeBackIn

// 合并退出条件
bool_longExitCondition = bool_exitLongWeak or bool_exitLongSqueeze
bool_shortExitCondition = bool_exitShortWeak or bool_exitShortSqueeze

// 重置状态
if (bool_longExitCondition or bool_shortExitCondition)
    bool_waitLongExitBySqueeze := false
    bool_waitShortExitBySqueeze := false

// === 交易执行 ===

// --- 入场逻辑 ---
if (bool_longSignalFiltered)
    strategy.entry("Long", strategy.long, comment="4S Long")

if (bool_shortSignalFiltered)
    strategy.entry("Short", strategy.short, comment="4S Short")

// --- 出场逻辑 ---
if (bool_longExitCondition)
    strategy.close("Long", comment="Exit Long")

if (bool_shortExitCondition)
    strategy.close("Short", comment="Exit Short")

// === 可视化 ===

// 信号标记
plotshape(bool_longSignalFiltered, title="Long Entry", location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.normal)
plotshape(bool_shortSignalFiltered, title="Short Entry", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.normal)
plotshape(bool_longExitCondition and strategy.position_size > 0, title="Exit Long", location=location.belowbar, color=color.new(color.gray, 0), style=shape.xcross, size=size.tiny)
plotshape(bool_shortExitCondition and strategy.position_size < 0, title="Exit Short", location=location.abovebar, color=color.new(color.gray, 0), style=shape.xcross, size=size.tiny)

// EMA线条
plot(bool_useEMAFilter ? float_emaFastLine : na, "EMA Fast", color.new(color.blue, 30), 1)
plot(bool_useEMAFilter ? float_emaSlowLine : na, "EMA Slow", color.new(color.orange, 30), 1)

// === 状态信息面板 ===
if barstate.islast
    var table table_status = table.new(position.top_right, 2, 6, border_width=1)
    
    // 表头
    table.cell(table_status, 0, 0, "4S v1.4 Status", bgcolor=color.new(color.white, 10), text_color=color.black, text_size=size.normal)
    table.cell(table_status, 1, 0, "Value", bgcolor=color.new(color.white, 10), text_color=color.black)
    
    // 压缩状态
    string_sqzStatus = bool_sqzOn ? "ON" : bool_sqzOff ? "OFF" : "NO"
    table.cell(table_status, 0, 1, "Squeeze", text_color=color.black)
    table.cell(table_status, 1, 1, string_sqzStatus, bgcolor=bool_sqzOn ? color.new(color.red, 70) : bool_sqzOff ? color.new(color.green, 70) : color.new(color.gray, 70))
    
    // 动量状态
    table.cell(table_status, 0, 2, "Momentum", text_color=color.black)  
    table.cell(table_status, 1, 2, str.tostring(float_momentum, "#.###"), 
              bgcolor=float_momentum > 0 ? color.new(color.green, 70) : color.new(color.red, 70),
              text_color=color.white)
    
    // WaveTrend状态
    table.cell(table_status, 0, 3, "WaveTrend", text_color=color.black)
    table.cell(table_status, 1, 3, float_wt1 > float_wt2 ? "UP" : "DOWN",
              bgcolor=float_wt1 > float_wt2 ? color.new(color.green, 70) : color.new(color.red, 70),
              text_color=color.white)
    
    // 趋势状态
    table.cell(table_status, 0, 4, "EMA Trend", text_color=color.black)
    string_trendStatus = bool_useEMAFilter ? (bool_emaBullTrend ? "BULL" : "BEAR") : "OFF"
    table.cell(table_status, 1, 4, string_trendStatus,
              bgcolor=bool_useEMAFilter ? (bool_emaBullTrend ? color.new(color.green, 70) : color.new(color.red, 70)) : color.new(color.gray, 70),
              text_color=color.white)
    
    // 成交量状态
    table.cell(table_status, 0, 5, "Volume", text_color=color.black)
    table.cell(table_status, 1, 5, str.tostring(volume/float_avgVolume, "#.##") + "x",
              bgcolor=bool_volumeConfirm ? color.new(color.green, 70) : color.new(color.red, 70),
              text_color=color.white)

// === 警报条件 ===
alertcondition(bool_longSignalFiltered, "Long Signal", "4S v1.4: Long swing signal detected!")
alertcondition(bool_shortSignalFiltered, "Short Signal", "4S v1.4: Short swing signal detected!")
alertcondition(bool_longExitCondition or bool_shortExitCondition, "Exit Signal", "4S v1.4: Position exit signal!")