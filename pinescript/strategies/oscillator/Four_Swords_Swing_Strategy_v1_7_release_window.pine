// @version=5
strategy("Four Swords Swing Strategy v1.7 Release Window", shorttitle="4S v1.7 RW", overlay=true, 
         initial_capital=500, default_qty_type=strategy.percent_of_equity, 
         default_qty_value=15, commission_type=strategy.commission.percent, 
         commission_value=0.02, calc_on_every_tick=false)

// ‚åò SUMMARY:
// Type: strategy (REVOLUTIONARY RELEASE WINDOW VERSION)
// Purpose: Breakthrough solution for signal scarcity using release window mechanism
// Key Innovation: Replace single-bar trigger with N-bar window after Squeeze ON‚ÜíOFF
// Expected Improvement: 5-10x signal frequency increase while maintaining quality
// Logic: Window-based momentum + WaveTrend alignment with three-mode filtering
// Status: Production-ready implementation

// === ËæìÂÖ•ÂèÇÊï∞ ===

// --- üöÄ Release Window System (NEW!) ---
group_window = "üöÄ Release Window System"
int_releaseWindow = input.int(5, title="Release Window Size", minval=3, maxval=10, tooltip="Number of bars after squeeze release to allow signal detection. Higher = more opportunities, Lower = stricter timing", group=group_window)
bool_showWindowVisuals = input.bool(true, title="Show Window Visuals", tooltip="Display window background, countdown labels, and release markers", group=group_window)
bool_preventDuplicates = input.bool(true, title="Prevent Duplicate Signals", tooltip="Only allow one signal per release window", group=group_window)

// --- ‰ø°Âè∑Ê®°ÂºèÈÄâÊã© ---
group_mode = "Signal Mode"
string_signalMode = input.string("Balanced", title="Signal Mode", options=["Strict", "Balanced", "Aggressive"], tooltip="Strict: Core+EMA+Volume, Balanced: Core+(EMA OR Volume), Aggressive: Core only", group=group_mode)

// --- SQZMOM ‰ºòÂåñÂèÇÊï∞ ---
group_sqzmom = "Squeeze Momentum (Optimized)"
int_bbLength = input.int(15, title="BB Length", minval=10, maxval=25, group=group_sqzmom)
float_bbMult = input.float(1.8, title="BB Multiplier", minval=1.5, maxval=2.5, step=0.1, group=group_sqzmom)
int_kcLength = input.int(15, title="KC Length", minval=10, maxval=25, group=group_sqzmom)
float_kcMult = input.float(1.3, title="KC Multiplier", minval=1.0, maxval=2.0, step=0.1, group=group_sqzmom)
bool_useTrueRange = input.bool(true, title="Use True Range (KC)", group=group_sqzmom)

// --- WaveTrend ‰ºòÂåñÂèÇÊï∞ ---
group_wavetrend = "WaveTrend Filter"
int_n1 = input.int(10, "WT Channel Length", minval=8, maxval=15, group=group_wavetrend)
int_n2 = input.int(18, "WT Average Length", minval=15, maxval=25, group=group_wavetrend)
int_wtSmooth = input.int(3, "WT Smoothing", minval=2, maxval=5, group=group_wavetrend)

// --- ÁÆÄÂåñËøáÊª§Á≥ªÁªü ---
group_filters = "Simple Filters"
bool_useEMAFilter = input.bool(true, "Use EMA Trend Filter", group=group_filters)
int_emaFast = input.int(20, "EMA Fast", minval=15, maxval=30, group=group_filters)
int_emaSlow = input.int(50, "EMA Slow", minval=40, maxval=60, group=group_filters)
bool_useVolumeFilter = input.bool(true, "Use Volume Filter", group=group_filters)
float_volumeMultiplier = input.float(1.2, "Volume Multiplier", minval=1.0, maxval=2.0, step=0.1, group=group_filters)

// --- È£éÈô©ÁÆ°ÁêÜ ---
group_risk = "Risk Management"
bool_useStopLoss = input.bool(true, "Enable Stop Loss", group=group_risk)
float_atrMultiplier = input.float(2.0, "ATR Stop Multiplier", minval=1.5, maxval=3.0, step=0.1, group=group_risk)
int_atrLength = input.int(14, "ATR Length", minval=10, maxval=20, group=group_risk)
bool_useVolatilityPosition = input.bool(true, "Volatility-Adjusted Sizing", group=group_risk)
float_basePositionSize = input.float(15.0, "Base Position Size %", minval=10.0, maxval=25.0, step=1.0, group=group_risk)

// --- Ë∞ÉËØïËÆæÁΩÆ ---
group_debug = "Debug Settings"
bool_showAllSignals = input.bool(true, "Show All Signal Layers", group=group_debug)
bool_showStatusPanel = input.bool(true, "Show Enhanced Status Panel", group=group_debug)
bool_showWindowStats = input.bool(true, "Show Window Statistics", group=group_debug)

// --- Á≠ñÁï•ËÆæÁΩÆ ---
group_strategy = "Strategy Settings"
string_tradeDirection = input.string("Both", title="Trade Direction", options=["Long Only", "Short Only", "Both"], group=group_strategy)

// === üöÄ RELEASE WINDOW STATE TRACKING (CORE INNOVATION) ===

// Window state variables
var int int_windowCountdown = 0
var bool bool_inReleaseWindow = false
var bool bool_windowSignalTriggered = false
var int int_windowStartBar = 0

// Statistics tracking
var int int_totalWindows = 0
var int int_totalWindowSignals = 0

// === Ê†∏ÂøÉËÆ°ÁÆó ===

// --- Market Regime Detection (ÁÆÄÂåñÁâà) ---
float_atr14 = ta.atr(14)
float_atr50sma = ta.sma(float_atr14, 50)
float_atrRatio = float_atr14 / float_atr50sma
bool_volatileMarket = float_atrRatio > 1.15

// --- SQZMOM ËÆ°ÁÆó ---
float_source = close
float_basis = ta.sma(float_source, int_bbLength)
float_dev = float_bbMult * ta.stdev(float_source, int_bbLength)
float_upperBB = float_basis + float_dev
float_lowerBB = float_basis - float_dev

float_ma = ta.sma(float_source, int_kcLength)
float_kcRange = bool_useTrueRange ? ta.tr : (high - low)
float_rangema = ta.sma(float_kcRange, int_kcLength)
float_upperKC = float_ma + float_rangema * float_kcMult
float_lowerKC = float_ma - float_rangema * float_kcMult

bool_sqzOn = (float_lowerBB > float_lowerKC) and (float_upperBB < float_upperKC)
bool_sqzOff = (float_lowerBB < float_lowerKC) and (float_upperBB > float_upperKC)
bool_noSqz = not bool_sqzOn and not bool_sqzOff

// MomentumËÆ°ÁÆó
float_momentum = ta.linreg(float_source - math.avg(math.avg(ta.highest(high, int_kcLength), ta.lowest(low, int_kcLength)), ta.sma(close, int_kcLength)), int_kcLength, 0)

// --- WaveTrend ËÆ°ÁÆó ---
float_ap = hlc3
float_esa = ta.ema(float_ap, int_n1)
float_d = ta.ema(math.abs(float_ap - float_esa), int_n1)
float_ci = float_d != 0 ? (float_ap - float_esa) / (0.015 * float_d) : 0
float_tci = ta.ema(float_ci, int_n2)

float_wt1 = float_tci
float_wt2 = ta.sma(float_wt1, int_wtSmooth)

// --- ËøáÊª§Âô®ËÆ°ÁÆó ---
float_emaFastLine = ta.ema(close, int_emaFast)
float_emaSlowLine = ta.ema(close, int_emaSlow)
bool_emaBullTrend = bool_useEMAFilter ? (float_emaFastLine > float_emaSlowLine) : true
bool_emaBearTrend = bool_useEMAFilter ? (float_emaFastLine < float_emaSlowLine) : true

float_avgVolume = ta.sma(volume, 20)
bool_volumeConfirm = bool_useVolumeFilter ? (volume > float_avgVolume * float_volumeMultiplier) : true

// --- È£éÈô©ÁÆ°ÁêÜËÆ°ÁÆó ---
float_atrValue = ta.atr(int_atrLength)
float_volatility = ta.stdev(close, 20) / ta.sma(close, 20)
float_normalizedVol = float_volatility / ta.sma(float_volatility, 50)
float_positionSize = bool_useVolatilityPosition ? math.max(10.0, math.min(20.0, float_basePositionSize / math.max(float_normalizedVol, 0.8))) : float_basePositionSize

// === üöÄ REVOLUTIONARY RELEASE WINDOW MECHANISM ===

// 1. Detect Squeeze Release Event
bool_squeezeReleaseEvent = bool_sqzOn[1] and not bool_sqzOn

// 2. Open Release Window on Squeeze Release
if (bool_squeezeReleaseEvent)
    int_windowCountdown := int_releaseWindow
    bool_inReleaseWindow := true
    bool_windowSignalTriggered := false  // Reset for new window
    int_windowStartBar := bar_index
    int_totalWindows += 1  // Statistics

// 3. Window Countdown and Closure
if (bool_inReleaseWindow)
    int_windowCountdown -= 1
    if (int_windowCountdown <= 0)
        bool_inReleaseWindow := false

// 4. üéØ CORE SIGNAL LOGIC: Window + Momentum + WaveTrend Alignment
bool_coreSignalLong = bool_inReleaseWindow and float_momentum > 0 and float_wt1 > float_wt2
bool_coreSignalShort = bool_inReleaseWindow and float_momentum < 0 and float_wt1 < float_wt2

// === ÂàÜÂ±Ç‰ø°Âè∑Á≥ªÁªü (Âü∫‰∫éÊñ∞ÁöÑÊ†∏ÂøÉ‰ø°Âè∑ÈÄªËæë) ===

// Á¨¨1Â±ÇÔºöRelease Window + Momentum 
bool_layer1_longSignal = bool_inReleaseWindow and float_momentum > 0
bool_layer1_shortSignal = bool_inReleaseWindow and float_momentum < 0

// Á¨¨2Â±ÇÔºö+ WaveTrendÁ°ÆËÆ§ (CORE SIGNAL)
bool_layer2_longSignal = bool_coreSignalLong
bool_layer2_shortSignal = bool_coreSignalShort

// Á¨¨3Â±ÇÔºö+ EMAËøáÊª§ÔºàÂ¶ÇÊûúÂêØÁî®Ôºâ
bool_layer3_longSignal = bool_layer2_longSignal and bool_emaBullTrend
bool_layer3_shortSignal = bool_layer2_shortSignal and bool_emaBearTrend

// Á¨¨4Â±ÇÔºö+ Êàê‰∫§ÈáèËøáÊª§ÔºàÂ¶ÇÊûúÂêØÁî®Ôºâ
bool_layer4_longSignal = bool_layer3_longSignal and bool_volumeConfirm
bool_layer4_shortSignal = bool_layer3_shortSignal and bool_volumeConfirm

// === ‰∏âÊ®°ÂºèÊúÄÁªà‰ø°Âè∑ÂÜ≥Á≠ñ (ÈÄªËæë‰øùÊåÅ‰∏ÄËá¥) ===
bool_finalLongSignal = false
bool_finalShortSignal = false

if (string_signalMode == "Strict")
    // ‰∏•Ê†ºÊ®°ÂºèÔºöÊ†∏ÂøÉ‰ø°Âè∑ + EMAË∂ãÂäø + Êàê‰∫§Èáè
    bool_finalLongSignal := bool_layer4_longSignal
    bool_finalShortSignal := bool_layer4_shortSignal
else if (string_signalMode == "Balanced")
    // Âπ≥Ë°°Ê®°ÂºèÔºöÊ†∏ÂøÉ‰ø°Âè∑ + (EMAË∂ãÂäø OR Êàê‰∫§Èáè)
    bool_finalLongSignal := bool_layer2_longSignal and (bool_emaBullTrend or bool_volumeConfirm)
    bool_finalShortSignal := bool_layer2_shortSignal and (bool_emaBearTrend or bool_volumeConfirm)
else if (string_signalMode == "Aggressive")
    // ÁßØÊûÅÊ®°ÂºèÔºö‰ªÖÊ†∏ÂøÉ‰ø°Âè∑ (Release Window + Momentum + WaveTrend)
    bool_finalLongSignal := bool_layer2_longSignal
    bool_finalShortSignal := bool_layer2_shortSignal

// === Èò≤ÈáçÂ§çËß¶ÂèëÊú∫Âà∂ ===
if (bool_preventDuplicates and bool_windowSignalTriggered)
    bool_finalLongSignal := false
    bool_finalShortSignal := false

// --- ÊñπÂêëËøáÊª§ ---
bool_longSignalFiltered = (string_tradeDirection != "Short Only") and bool_finalLongSignal
bool_shortSignalFiltered = (string_tradeDirection != "Long Only") and bool_finalShortSignal

// --- Near Miss ÂàÜÊûê (Âü∫‰∫éÊñ∞Ê†∏ÂøÉ‰ø°Âè∑) ---
bool_nearMissLong_EMA = bool_layer2_longSignal and not bool_emaBullTrend and bool_volumeConfirm
bool_nearMissLong_Volume = bool_layer2_longSignal and bool_emaBullTrend and not bool_volumeConfirm
bool_nearMissLong_Both = bool_layer2_longSignal and not bool_emaBullTrend and not bool_volumeConfirm

bool_nearMissShort_EMA = bool_layer2_shortSignal and not bool_emaBearTrend and bool_volumeConfirm
bool_nearMissShort_Volume = bool_layer2_shortSignal and bool_emaBearTrend and not bool_volumeConfirm
bool_nearMissShort_Both = bool_layer2_shortSignal and not bool_emaBearTrend and not bool_volumeConfirm

// === Áä∂ÊÄÅÁÆ°ÁêÜÂíå‰∫§ÊòìÊâßË°å ===

// --- Áä∂ÊÄÅË∑üË∏™ ---
var bool bool_waitLongExitBySqueeze = false
var bool bool_waitShortExitBySqueeze = false
var float float_longStopPrice = na
var float float_shortStopPrice = na

// ÂÜ≥ÂÆöÈÄÄÂá∫Êù°‰ª∂Á±ªÂûãÂíåÊ†áËÆ∞Á™óÂè£Â∑≤Ëß¶Âèë
if (bool_longSignalFiltered and strategy.position_size == 0)
    bool_waitLongExitBySqueeze := (float_momentum > float_momentum[1])
    float_longStopPrice := bool_useStopLoss ? close - (float_atrValue * float_atrMultiplier) : na
    bool_windowSignalTriggered := bool_preventDuplicates  // Mark window as used
    int_totalWindowSignals += 1  // Statistics

if (bool_shortSignalFiltered and strategy.position_size == 0)
    bool_waitShortExitBySqueeze := (float_momentum < float_momentum[1])
    float_shortStopPrice := bool_useStopLoss ? close + (float_atrValue * float_atrMultiplier) : na
    bool_windowSignalTriggered := bool_preventDuplicates  // Mark window as used
    int_totalWindowSignals += 1  // Statistics

// --- ÂèçËΩ¨ÂíåÈÄÄÂá∫‰ø°Âè∑ ---
bool_squeezeBackIn = bool_sqzOn and not bool_sqzOn[1]

bool_exitLongWeak = strategy.position_size > 0 and not bool_waitLongExitBySqueeze and (float_momentum < 0)
bool_exitShortWeak = strategy.position_size < 0 and not bool_waitShortExitBySqueeze and (float_momentum > 0)

bool_exitLongSqueeze = strategy.position_size > 0 and bool_waitLongExitBySqueeze and bool_squeezeBackIn
bool_exitShortSqueeze = strategy.position_size < 0 and bool_waitShortExitBySqueeze and bool_squeezeBackIn

bool_longStopHit = bool_useStopLoss and strategy.position_size > 0 and not na(float_longStopPrice) and close <= float_longStopPrice
bool_shortStopHit = bool_useStopLoss and strategy.position_size < 0 and not na(float_shortStopPrice) and close >= float_shortStopPrice

bool_longExitCondition = bool_exitLongWeak or bool_exitLongSqueeze or bool_longStopHit
bool_shortExitCondition = bool_exitShortWeak or bool_exitShortSqueeze or bool_shortStopHit

// --- ‰∫§ÊòìÊâßË°å ---
if (bool_longSignalFiltered)
    strategy.entry("Long", strategy.long, qty=float_positionSize, comment="4S Long RW")

if (bool_shortSignalFiltered)
    strategy.entry("Short", strategy.short, qty=float_positionSize, comment="4S Short RW")

if (bool_longExitCondition)
    strategy.close("Long", comment="Exit Long")

if (bool_shortExitCondition)
    strategy.close("Short", comment="Exit Short")

// ÈáçÁΩÆÁä∂ÊÄÅ
if (strategy.position_size == 0)
    bool_waitLongExitBySqueeze := false
    bool_waitShortExitBySqueeze := false
    float_longStopPrice := na
    float_shortStopPrice := na

// === üöÄ REVOLUTIONARY VISUALIZATION ===

// --- Release Window Visual System ---
bgcolor(bool_showWindowVisuals and bool_inReleaseWindow ? color.new(color.blue, 95) : na, title="üöÄ Release Window")

// Release event markers
plotshape(bool_showWindowVisuals and bool_squeezeReleaseEvent, title="üöÄ Squeeze Release", location=location.top, color=color.new(color.orange, 0), style=shape.arrowup, size=size.small, text="üöÄ", textcolor=color.orange)

// Window countdown labels
if (bool_showWindowVisuals and bool_inReleaseWindow)
    label.new(bar_index, high * 1.01, str.tostring(int_windowCountdown), style=label.style_circle, color=color.new(color.blue, 20), textcolor=color.white, size=size.tiny)

// --- Core Signal Visualization ---
// Layer 1: Window + Momentum (large circles)
plotshape(bool_showAllSignals and bool_layer1_longSignal, title="Layer 1: Window+Mom Long", location=location.belowbar, color=color.new(color.lime, 70), style=shape.circle, size=size.large)
plotshape(bool_showAllSignals and bool_layer1_shortSignal, title="Layer 1: Window+Mom Short", location=location.abovebar, color=color.new(color.red, 70), style=shape.circle, size=size.large)

// Layer 2: + WaveTrend (CORE SIGNAL - medium triangles)
plotshape(bool_showAllSignals and bool_layer2_longSignal, title="Layer 2: CORE Long", location=location.belowbar, color=color.new(color.green, 30), style=shape.triangleup, size=size.normal)
plotshape(bool_showAllSignals and bool_layer2_shortSignal, title="Layer 2: CORE Short", location=location.abovebar, color=color.new(color.red, 30), style=shape.triangledown, size=size.normal)

// Layer 3: + EMA (small diamonds)
plotshape(bool_showAllSignals and bool_layer3_longSignal, title="Layer 3: +EMA Long", location=location.belowbar, color=color.new(color.blue, 20), style=shape.diamond, size=size.small)
plotshape(bool_showAllSignals and bool_layer3_shortSignal, title="Layer 3: +EMA Short", location=location.abovebar, color=color.new(color.purple, 20), style=shape.diamond, size=size.small)

// ÊúÄÁªà‰∫§Êòì‰ø°Âè∑ (Ê∑±Ëâ≤, Á™ÅÂá∫ÊòæÁ§∫)
plotshape(bool_longSignalFiltered, title="üéØ FINAL Long Entry", location=location.belowbar, color=color.new(color.green, 0), style=shape.triangleup, size=size.normal)
plotshape(bool_shortSignalFiltered, title="üéØ FINAL Short Entry", location=location.abovebar, color=color.new(color.red, 0), style=shape.triangledown, size=size.normal)

// Near Miss ‰ø°Âè∑
plotshape(bool_nearMissLong_EMA, title="Near Miss: EMA Failed", location=location.belowbar, color=color.new(color.yellow, 40), style=shape.square, size=size.tiny)
plotshape(bool_nearMissLong_Volume, title="Near Miss: Volume Failed", location=location.belowbar, color=color.new(color.orange, 40), style=shape.square, size=size.tiny)

// ÈÄÄÂá∫‰ø°Âè∑
plotshape(bool_longExitCondition and strategy.position_size > 0, title="Exit Long", location=location.belowbar, color=color.new(color.gray, 0), style=shape.xcross, size=size.tiny)
plotshape(bool_shortExitCondition and strategy.position_size < 0, title="Exit Short", location=location.abovebar, color=color.new(color.gray, 0), style=shape.xcross, size=size.tiny)

// EMAÁ∫øÊù°
plot(bool_useEMAFilter ? float_emaFastLine : na, "EMA Fast", color.new(color.blue, 30), 1)
plot(bool_useEMAFilter ? float_emaSlowLine : na, "EMA Slow", color.new(color.orange, 30), 1)

// Ê≠¢ÊçüÁ∫ø
plot(strategy.position_size > 0 and not na(float_longStopPrice) ? float_longStopPrice : na, "Long Stop", color.red, 1, plot.style_stepline)
plot(strategy.position_size < 0 and not na(float_shortStopPrice) ? float_shortStopPrice : na, "Short Stop", color.red, 1, plot.style_stepline)

// === üöÄ ENHANCED STATUS PANEL ===
if barstate.islast and bool_showStatusPanel
    var table table_status = table.new(position.top_right, 3, 16, border_width=1)
    
    // Ë°®Â§¥
    table.cell(table_status, 0, 0, "4S v1.7 üöÄ Release Window", bgcolor=color.new(color.blue, 10), text_color=color.white, text_size=size.normal)
    table.cell(table_status, 1, 0, "Value", bgcolor=color.new(color.blue, 10), text_color=color.white)
    table.cell(table_status, 2, 0, "Status", bgcolor=color.new(color.blue, 10), text_color=color.white)
    
    // üöÄ Release Window Status (NEW!)
    string_windowStatus = bool_inReleaseWindow ? ("ACTIVE (" + str.tostring(int_windowCountdown) + ")") : "CLOSED"
    table.cell(table_status, 0, 1, "üöÄ Window", text_color=color.black)
    table.cell(table_status, 1, 1, string_windowStatus, 
              bgcolor=bool_inReleaseWindow ? color.new(color.green, 70) : color.new(color.gray, 70), 
              text_color=color.white)
    table.cell(table_status, 2, 1, bool_inReleaseWindow ? "üü¢" : "‚ö´", text_color=color.white)
    
    // ‰ø°Âè∑Ê®°Âºè
    table.cell(table_status, 0, 2, "Mode", text_color=color.black)
    table.cell(table_status, 1, 2, string_signalMode, bgcolor=color.new(color.purple, 70), text_color=color.white)
    table.cell(table_status, 2, 2, "", text_color=color.black)
    
    // ÂéãÁº©Áä∂ÊÄÅ
    string_sqzStatus = bool_sqzOn ? "ON" : bool_sqzOff ? "OFF" : "NO"
    table.cell(table_status, 0, 3, "Squeeze", text_color=color.black)
    table.cell(table_status, 1, 3, string_sqzStatus, bgcolor=bool_sqzOn ? color.new(color.red, 70) : bool_sqzOff ? color.new(color.green, 70) : color.new(color.gray, 70))
    table.cell(table_status, 2, 3, bool_squeezeReleaseEvent ? "üöÄ" : (bool_sqzOff ? "‚úì" : "‚úó"), bgcolor=bool_squeezeReleaseEvent ? color.new(color.orange, 70) : (bool_sqzOff ? color.new(color.green, 70) : color.new(color.red, 70)), text_color=color.white)
    
    // Âä®ÈáèÊñπÂêë
    table.cell(table_status, 0, 4, "Momentum", text_color=color.black)
    table.cell(table_status, 1, 4, str.tostring(float_momentum, "#.###"), bgcolor=float_momentum > 0 ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    table.cell(table_status, 2, 4, float_momentum > 0 ? "üü¢" : "üî¥", text_color=color.white)
    
    // WaveTrendÁä∂ÊÄÅ
    table.cell(table_status, 0, 5, "WaveTrend", text_color=color.black)
    table.cell(table_status, 1, 5, float_wt1 > float_wt2 ? "UP" : "DOWN", bgcolor=float_wt1 > float_wt2 ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    table.cell(table_status, 2, 5, float_wt1 > float_wt2 ? "üü¢" : "üî¥", text_color=color.white)
    
    // üéØ Core Signal Status (NEW!)
    table.cell(table_status, 0, 6, "üéØ Core Signal", text_color=color.black)
    string_coreSignal = bool_coreSignalLong ? "LONG" : bool_coreSignalShort ? "SHORT" : "NONE"
    table.cell(table_status, 1, 6, string_coreSignal,
              bgcolor=bool_coreSignalLong ? color.new(color.green, 70) : bool_coreSignalShort ? color.new(color.red, 70) : color.new(color.gray, 70),
              text_color=color.white)
    table.cell(table_status, 2, 6, bool_layer2_longSignal or bool_layer2_shortSignal ? "üéØ" : "‚ö´", text_color=color.white)
    
    // EMAË∂ãÂäø
    table.cell(table_status, 0, 7, "EMA Trend", text_color=color.black)
    string_trendStatus = bool_useEMAFilter ? (bool_emaBullTrend ? "BULL" : "BEAR") : "OFF"
    table.cell(table_status, 1, 7, string_trendStatus,
              bgcolor=bool_useEMAFilter ? (bool_emaBullTrend ? color.new(color.green, 70) : color.new(color.red, 70)) : color.new(color.gray, 70),
              text_color=color.white)
    table.cell(table_status, 2, 7, bool_emaBullTrend ? "üü¢" : "üî¥", text_color=color.white)
    
    // Êàê‰∫§ÈáèÁ°ÆËÆ§
    table.cell(table_status, 0, 8, "Volume", text_color=color.black)
    table.cell(table_status, 1, 8, str.tostring(volume/float_avgVolume, "#.##") + "x", bgcolor=bool_volumeConfirm ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    table.cell(table_status, 2, 8, bool_volumeConfirm ? "üü¢" : "üî¥", text_color=color.white)
    
    // ÊúÄÁªà‰ø°Âè∑
    table.cell(table_status, 0, 9, "Final Signal", text_color=color.black)
    string_finalSignal = bool_longSignalFiltered ? "LONG" : bool_shortSignalFiltered ? "SHORT" : "NONE"
    table.cell(table_status, 1, 9, string_finalSignal, bgcolor=bool_longSignalFiltered ? color.new(color.green, 70) : bool_shortSignalFiltered ? color.new(color.red, 70) : color.new(color.gray, 70), text_color=color.white)
    table.cell(table_status, 2, 9, bool_longSignalFiltered or bool_shortSignalFiltered ? "üéØ" : "‚ö´", text_color=color.white)
    
    // üöÄ Anti-Duplicate Status (NEW!)
    table.cell(table_status, 0, 10, "üö´ Anti-Dup", text_color=color.black)
    string_dupStatus = bool_preventDuplicates ? (bool_windowSignalTriggered ? "USED" : "READY") : "OFF"
    table.cell(table_status, 1, 10, string_dupStatus, bgcolor=bool_preventDuplicates ? (bool_windowSignalTriggered ? color.new(color.red, 70) : color.new(color.green, 70)) : color.new(color.gray, 70), text_color=color.white)
    table.cell(table_status, 2, 10, bool_preventDuplicates ? (bool_windowSignalTriggered ? "üö´" : "‚úÖ") : "‚ö´", text_color=color.white)
    
    // === üöÄ WINDOW STATISTICS (NEW!) ===
    if (bool_showWindowStats)
        // Total Windows
        table.cell(table_status, 0, 11, "üìä Total Windows", text_color=color.black)
        table.cell(table_status, 1, 11, str.tostring(int_totalWindows), bgcolor=color.new(color.blue, 70), text_color=color.white)
        table.cell(table_status, 2, 11, "üìä", text_color=color.white)
        
        // Window Signals
        table.cell(table_status, 0, 12, "üéØ Window Signals", text_color=color.black)
        table.cell(table_status, 1, 12, str.tostring(int_totalWindowSignals), bgcolor=color.new(color.green, 70), text_color=color.white)
        table.cell(table_status, 2, 12, "üéØ", text_color=color.white)
        
        // Window Efficiency
        float_windowEfficiency = int_totalWindows > 0 ? (int_totalWindowSignals / int_totalWindows) * 100 : 0
        table.cell(table_status, 0, 13, "‚ö° Efficiency %", text_color=color.black)
        table.cell(table_status, 1, 13, str.tostring(float_windowEfficiency, "#.#") + "%", bgcolor=float_windowEfficiency > 50 ? color.new(color.green, 70) : float_windowEfficiency > 25 ? color.new(color.yellow, 70) : color.new(color.red, 70), text_color=color.white)
        table.cell(table_status, 2, 13, float_windowEfficiency > 50 ? "‚ö°" : float_windowEfficiency > 25 ? "‚ö†Ô∏è" : "üî¥", text_color=color.white)

// === Ë≠¶Êä•Êù°‰ª∂ ===
alertcondition(bool_squeezeReleaseEvent, "üöÄ Release Window Opened", "4S v1.7: Release window opened - monitoring for signals!")
alertcondition(bool_coreSignalLong, "üéØ Core Long Signal", "4S v1.7: Core long signal detected in window!")
alertcondition(bool_coreSignalShort, "üéØ Core Short Signal", "4S v1.7: Core short signal detected in window!")
alertcondition(bool_longSignalFiltered, "üìà Final Long Signal", "4S v1.7: FINAL long signal - ready to trade!")
alertcondition(bool_shortSignalFiltered, "üìâ Final Short Signal", "4S v1.7: FINAL short signal - ready to trade!")
alertcondition(bool_nearMissLong_EMA or bool_nearMissLong_Volume, "‚ö†Ô∏è Near Miss Long", "4S v1.7: Near miss long signal - watch for improvement!")
alertcondition(bool_longExitCondition or bool_shortExitCondition, "üö™ Exit Signal", "4S v1.7: Exit condition triggered!")

// === End of Four Swords v1.7 Release Window Revolution üöÄ ===