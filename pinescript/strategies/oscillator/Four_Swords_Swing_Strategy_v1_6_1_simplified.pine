// @version=5
strategy("Four Swords Swing Strategy v1.6.1 Simplified", shorttitle="4S v1.6.1 S", overlay=true, 
         initial_capital=500, default_qty_type=strategy.percent_of_equity, 
         default_qty_value=15, commission_type=strategy.commission.percent, 
         commission_value=0.02, calc_on_every_tick=false)

// ⌘ SUMMARY:
// Type: strategy (SIMPLIFIED DEBUG VERSION)
// Purpose: Simplified version of v1.6 removing complex scoring system for better signal clarity
// Key Changes: Direct signal logic, enhanced plotting, scoring system bypass
// Target: More frequent signals on daily timeframe with clear signal visualization
// Logic: Back to basic SQZMOM + WaveTrend + optional filters

// === 输入参数 ===

// --- 信号模式选择 ---
group_mode = "Signal Mode"
string_signalMode = input.string("Balanced", title="Signal Mode", options=["Strict", "Balanced", "Aggressive"], tooltip="Strict: All filters required, Balanced: Adaptive filters, Aggressive: Minimal filters", group=group_mode)

// --- SQZMOM 优化参数 ---
group_sqzmom = "Squeeze Momentum (Optimized)"
int_bbLength = input.int(15, title="BB Length", minval=10, maxval=25, group=group_sqzmom)
float_bbMult = input.float(1.8, title="BB Multiplier", minval=1.5, maxval=2.5, step=0.1, group=group_sqzmom)
int_kcLength = input.int(15, title="KC Length", minval=10, maxval=25, group=group_sqzmom)
float_kcMult = input.float(1.3, title="KC Multiplier", minval=1.0, maxval=2.0, step=0.1, group=group_sqzmom)
bool_useTrueRange = input.bool(true, title="Use True Range (KC)", group=group_sqzmom)

// --- WaveTrend 优化参数 ---
group_wavetrend = "WaveTrend Filter"
int_n1 = input.int(10, "WT Channel Length", minval=8, maxval=15, group=group_wavetrend)
int_n2 = input.int(18, "WT Average Length", minval=15, maxval=25, group=group_wavetrend)
int_wtSmooth = input.int(3, "WT Smoothing", minval=2, maxval=5, group=group_wavetrend)

// --- 简化过滤系统 ---
group_filters = "Simple Filters"
bool_useEMAFilter = input.bool(true, "Use EMA Trend Filter", group=group_filters)
int_emaFast = input.int(20, "EMA Fast", minval=15, maxval=30, group=group_filters)
int_emaSlow = input.int(50, "EMA Slow", minval=40, maxval=60, group=group_filters)
bool_useVolumeFilter = input.bool(true, "Use Volume Filter", group=group_filters)
float_volumeMultiplier = input.float(1.2, "Volume Multiplier", minval=1.0, maxval=2.0, step=0.1, group=group_filters)

// --- 风险管理 ---
group_risk = "Risk Management"
bool_useStopLoss = input.bool(true, "Enable Stop Loss", group=group_risk)
float_atrMultiplier = input.float(2.0, "ATR Stop Multiplier", minval=1.5, maxval=3.0, step=0.1, group=group_risk)
int_atrLength = input.int(14, "ATR Length", minval=10, maxval=20, group=group_risk)
bool_useVolatilityPosition = input.bool(true, "Volatility-Adjusted Sizing", group=group_risk)
float_basePositionSize = input.float(15.0, "Base Position Size %", minval=10.0, maxval=25.0, step=1.0, group=group_risk)

// --- 调试设置 ---
group_debug = "Debug Settings"
bool_showAllSignals = input.bool(true, "Show All Signal Layers", group=group_debug)
bool_showScoreBreakdown = input.bool(true, "Show Score Breakdown in Panel", group=group_debug)

// --- 策略设置 ---
group_strategy = "Strategy Settings"
string_tradeDirection = input.string("Both", title="Trade Direction", options=["Long Only", "Short Only", "Both"], group=group_strategy)
bool_useConfirmedSignal = input.bool(false, title="Use Delayed Confirmed Signal", group=group_strategy)

// === 核心计算 ===

// --- Market Regime Detection (简化版) ---
float_atr14 = ta.atr(14)
float_atr50sma = ta.sma(float_atr14, 50)
float_atrRatio = float_atr14 / float_atr50sma
bool_volatileMarket = float_atrRatio > 1.15

// --- SQZMOM 计算 ---
float_source = close
float_basis = ta.sma(float_source, int_bbLength)
float_dev = float_bbMult * ta.stdev(float_source, int_bbLength)
float_upperBB = float_basis + float_dev
float_lowerBB = float_basis - float_dev

float_ma = ta.sma(float_source, int_kcLength)
float_kcRange = bool_useTrueRange ? ta.tr : (high - low)
float_rangema = ta.sma(float_kcRange, int_kcLength)
float_upperKC = float_ma + float_rangema * float_kcMult
float_lowerKC = float_ma - float_rangema * float_kcMult

bool_sqzOn = (float_lowerBB > float_lowerKC) and (float_upperBB < float_upperKC)
bool_sqzOff = (float_lowerBB < float_lowerKC) and (float_upperBB > float_upperKC)
bool_noSqz = not bool_sqzOn and not bool_sqzOff

// Momentum计算
float_momentum = ta.linreg(float_source - math.avg(math.avg(ta.highest(high, int_kcLength), ta.lowest(low, int_kcLength)), ta.sma(close, int_kcLength)), int_kcLength, 0)

// --- WaveTrend 计算 ---
float_ap = hlc3
float_esa = ta.ema(float_ap, int_n1)
float_d = ta.ema(math.abs(float_ap - float_esa), int_n1)
float_ci = float_d != 0 ? (float_ap - float_esa) / (0.015 * float_d) : 0
float_tci = ta.ema(float_ci, int_n2)

float_wt1 = float_tci
float_wt2 = ta.sma(float_wt1, int_wtSmooth)

// --- 过滤器计算 ---
float_emaFastLine = ta.ema(close, int_emaFast)
float_emaSlowLine = ta.ema(close, int_emaSlow)
bool_emaBullTrend = bool_useEMAFilter ? (float_emaFastLine > float_emaSlowLine) : true
bool_emaBearTrend = bool_useEMAFilter ? (float_emaFastLine < float_emaSlowLine) : true

float_avgVolume = ta.sma(volume, 20)
bool_volumeConfirm = bool_useVolumeFilter ? (volume > float_avgVolume * float_volumeMultiplier) : true

// --- 风险管理计算 ---
float_atrValue = ta.atr(int_atrLength)
float_volatility = ta.stdev(close, 20) / ta.sma(close, 20)
float_normalizedVol = float_volatility / ta.sma(float_volatility, 50)
float_positionSize = bool_useVolatilityPosition ? math.max(10.0, math.min(20.0, float_basePositionSize / math.max(float_normalizedVol, 0.8))) : float_basePositionSize

// === 简化信号逻辑 ===

// --- 基础SQZMOM信号 ---
bool_blackCross_raw = bool_sqzOn[1] and not bool_sqzOn
bool_signalBar_raw = bool_blackCross_raw and not bool_noSqz

bool_blackCross = bool_useConfirmedSignal ? bool_blackCross_raw[1] : bool_blackCross_raw
bool_signalBar = bool_useConfirmedSignal ? bool_signalBar_raw[1] : bool_signalBar_raw

// --- 分层信号（用于调试显示）---

// 第1层：SQZMOM基础信号
bool_layer1_longSignal = bool_signalBar and float_momentum > 0
bool_layer1_shortSignal = bool_signalBar and float_momentum < 0

// 第2层：+ WaveTrend确认
bool_layer2_longSignal = bool_layer1_longSignal and float_wt1 > float_wt2
bool_layer2_shortSignal = bool_layer1_shortSignal and float_wt1 < float_wt2

// 第3层：+ EMA过滤（如果启用）
bool_layer3_longSignal = bool_layer2_longSignal and bool_emaBullTrend
bool_layer3_shortSignal = bool_layer2_shortSignal and bool_emaBearTrend

// 第4层：+ 成交量过滤（如果启用）
bool_layer4_longSignal = bool_layer3_longSignal and bool_volumeConfirm
bool_layer4_shortSignal = bool_layer3_shortSignal and bool_volumeConfirm

// --- 根据模式决定最终信号 ---
bool_finalLongSignal = false
bool_finalShortSignal = false

if (string_signalMode == "Strict")
    // 严格模式：所有过滤器都必须通过
    bool_finalLongSignal := bool_layer4_longSignal
    bool_finalShortSignal := bool_layer4_shortSignal
else if (string_signalMode == "Balanced")
    // 平衡模式：基础信号+WaveTrend+至少一个过滤器
    bool_finalLongSignal := bool_layer2_longSignal and (bool_emaBullTrend or bool_volumeConfirm)
    bool_finalShortSignal := bool_layer2_shortSignal and (bool_emaBearTrend or bool_volumeConfirm)
else if (string_signalMode == "Aggressive")
    // 积极模式：只需要基础信号+WaveTrend
    bool_finalLongSignal := bool_layer2_longSignal
    bool_finalShortSignal := bool_layer2_shortSignal

// --- 方向过滤 ---
bool_longSignalFiltered = (string_tradeDirection != "Short Only") and bool_finalLongSignal
bool_shortSignalFiltered = (string_tradeDirection != "Long Only") and bool_finalShortSignal

// --- Near Miss 分析 ---
bool_nearMissLong_EMA = bool_layer2_longSignal and not bool_emaBullTrend and bool_volumeConfirm
bool_nearMissLong_Volume = bool_layer2_longSignal and bool_emaBullTrend and not bool_volumeConfirm
bool_nearMissLong_Both = bool_layer2_longSignal and not bool_emaBullTrend and not bool_volumeConfirm

bool_nearMissShort_EMA = bool_layer2_shortSignal and not bool_emaBearTrend and bool_volumeConfirm
bool_nearMissShort_Volume = bool_layer2_shortSignal and bool_emaBearTrend and not bool_volumeConfirm
bool_nearMissShort_Both = bool_layer2_shortSignal and not bool_emaBearTrend and not bool_volumeConfirm

// --- 反转信号 ---
bool_squeezeBackIn = bool_sqzOn and not bool_sqzOn[1]
bool_reversalToLong = bool_squeezeBackIn and float_momentum > 0 and float_wt1 > float_wt2
bool_reversalToShort = bool_squeezeBackIn and float_momentum < 0 and float_wt1 < float_wt2

// === 状态管理和交易执行 ===

// --- 状态跟踪 ---
var bool bool_waitLongExitBySqueeze = false
var bool bool_waitShortExitBySqueeze = false
var float float_longStopPrice = na
var float float_shortStopPrice = na

// 决定退出条件类型
if (bool_longSignalFiltered and strategy.position_size == 0)
    bool_waitLongExitBySqueeze := (float_momentum > float_momentum[1])
    float_longStopPrice := bool_useStopLoss ? close - (float_atrValue * float_atrMultiplier) : na

if (bool_shortSignalFiltered and strategy.position_size == 0)
    bool_waitShortExitBySqueeze := (float_momentum < float_momentum[1])
    float_shortStopPrice := bool_useStopLoss ? close + (float_atrValue * float_atrMultiplier) : na

// --- 退出信号 ---
bool_exitLongWeak = strategy.position_size > 0 and not bool_waitLongExitBySqueeze and (float_momentum < 0)
bool_exitShortWeak = strategy.position_size < 0 and not bool_waitShortExitBySqueeze and (float_momentum > 0)

bool_exitLongSqueeze = strategy.position_size > 0 and bool_waitLongExitBySqueeze and bool_squeezeBackIn
bool_exitShortSqueeze = strategy.position_size < 0 and bool_waitShortExitBySqueeze and bool_squeezeBackIn

bool_longStopHit = bool_useStopLoss and strategy.position_size > 0 and not na(float_longStopPrice) and close <= float_longStopPrice
bool_shortStopHit = bool_useStopLoss and strategy.position_size < 0 and not na(float_shortStopPrice) and close >= float_shortStopPrice

bool_longExitCondition = bool_exitLongWeak or bool_exitLongSqueeze or bool_longStopHit
bool_shortExitCondition = bool_exitShortWeak or bool_exitShortSqueeze or bool_shortStopHit

// --- 交易执行 ---
if (bool_longSignalFiltered)
    strategy.entry("Long", strategy.long, qty=float_positionSize, comment="4S Long S")

if (bool_shortSignalFiltered)
    strategy.entry("Short", strategy.short, qty=float_positionSize, comment="4S Short S")

if (bool_longExitCondition)
    strategy.close("Long", comment="Exit Long")

if (bool_shortExitCondition)
    strategy.close("Short", comment="Exit Short")

// 重置状态
if (strategy.position_size == 0)
    bool_waitLongExitBySqueeze := false
    bool_waitShortExitBySqueeze := false
    float_longStopPrice := na
    float_shortStopPrice := na

// === 增强可视化 ===

// 第1层：SQZMOM + 动量 (大圆圈) - 条件绘制
plotshape(bool_showAllSignals and bool_layer1_longSignal, title="Layer 1 Long (SQZMOM)", location=location.belowbar, color=color.new(color.lime, 60), style=shape.circle, size=size.large)
plotshape(bool_showAllSignals and bool_layer1_shortSignal, title="Layer 1 Short (SQZMOM)", location=location.abovebar, color=color.new(color.red, 60), style=shape.circle, size=size.large)

// 第2层：+ WaveTrend (中三角) - 条件绘制
plotshape(bool_showAllSignals and bool_layer2_longSignal, title="Layer 2 Long (+WT)", location=location.belowbar, color=color.new(color.green, 30), style=shape.triangleup, size=size.normal)
plotshape(bool_showAllSignals and bool_layer2_shortSignal, title="Layer 2 Short (+WT)", location=location.abovebar, color=color.new(color.red, 30), style=shape.triangledown, size=size.normal)

// 第3层：+ EMA (小菱形) - 条件绘制
plotshape(bool_showAllSignals and bool_layer3_longSignal, title="Layer 3 Long (+EMA)", location=location.belowbar, color=color.new(color.blue, 20), style=shape.diamond, size=size.small)
plotshape(bool_showAllSignals and bool_layer3_shortSignal, title="Layer 3 Short (+EMA)", location=location.abovebar, color=color.new(color.purple, 20), style=shape.diamond, size=size.small)

// 最终交易信号 (正常大小，深色)
plotshape(bool_longSignalFiltered, title="Final Long Entry", location=location.belowbar, 
          color=color.new(color.green, 0), style=shape.triangleup, size=size.normal)
plotshape(bool_shortSignalFiltered, title="Final Short Entry", location=location.abovebar, 
          color=color.new(color.red, 0), style=shape.triangledown, size=size.normal)

// Near Miss 信号
plotshape(bool_nearMissLong_EMA, title="Near Miss Long (EMA Failed)", location=location.belowbar, 
          color=color.new(color.yellow, 40), style=shape.square, size=size.tiny)
plotshape(bool_nearMissLong_Volume, title="Near Miss Long (Volume Failed)", location=location.belowbar, 
          color=color.new(color.orange, 40), style=shape.square, size=size.tiny)
plotshape(bool_nearMissLong_Both, title="Near Miss Long (Both Failed)", location=location.belowbar, 
          color=color.new(color.gray, 40), style=shape.square, size=size.tiny)

// 反转信号
plotshape(bool_reversalToLong, title="Reversal to Long", location=location.belowbar, 
          color=color.new(color.aqua, 30), style=shape.arrowup, size=size.small)
plotshape(bool_reversalToShort, title="Reversal to Short", location=location.abovebar, 
          color=color.new(color.fuchsia, 30), style=shape.arrowdown, size=size.small)

// 退出信号
plotshape(bool_longExitCondition and strategy.position_size > 0, title="Exit Long", location=location.belowbar, 
          color=color.new(color.gray, 0), style=shape.xcross, size=size.tiny)
plotshape(bool_shortExitCondition and strategy.position_size < 0, title="Exit Short", location=location.abovebar, 
          color=color.new(color.gray, 0), style=shape.xcross, size=size.tiny)

// EMA线条
plot(bool_useEMAFilter ? float_emaFastLine : na, "EMA Fast", color.new(color.blue, 30), 1)
plot(bool_useEMAFilter ? float_emaSlowLine : na, "EMA Slow", color.new(color.orange, 30), 1)

// 止损线
plot(strategy.position_size > 0 and not na(float_longStopPrice) ? float_longStopPrice : na, "Long Stop", color.red, 1, plot.style_stepline)
plot(strategy.position_size < 0 and not na(float_shortStopPrice) ? float_shortStopPrice : na, "Short Stop", color.red, 1, plot.style_stepline)

// === 调试状态面板 ===
if barstate.islast and bool_showScoreBreakdown
    var table table_status = table.new(position.top_right, 3, 12, border_width=1)
    
    // 表头
    table.cell(table_status, 0, 0, "4S v1.6.1 Simplified", bgcolor=color.new(color.blue, 10), text_color=color.white, text_size=size.normal)
    table.cell(table_status, 1, 0, "Value", bgcolor=color.new(color.blue, 10), text_color=color.white)
    table.cell(table_status, 2, 0, "Pass", bgcolor=color.new(color.blue, 10), text_color=color.white)
    
    // 信号模式
    table.cell(table_status, 0, 1, "Mode", text_color=color.black)
    table.cell(table_status, 1, 1, string_signalMode, bgcolor=color.new(color.purple, 70), text_color=color.white)
    table.cell(table_status, 2, 1, "", text_color=color.black)
    
    // 压缩状态
    string_sqzStatus = bool_sqzOn ? "ON" : bool_sqzOff ? "OFF" : "NO"
    table.cell(table_status, 0, 2, "Squeeze", text_color=color.black)
    table.cell(table_status, 1, 2, string_sqzStatus, bgcolor=bool_sqzOn ? color.new(color.red, 70) : bool_sqzOff ? color.new(color.green, 70) : color.new(color.gray, 70))
    table.cell(table_status, 2, 2, bool_signalBar ? "✓" : "✗", bgcolor=bool_signalBar ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    // 动量方向
    table.cell(table_status, 0, 3, "Momentum", text_color=color.black)  
    table.cell(table_status, 1, 3, str.tostring(float_momentum, "#.###"), 
              bgcolor=float_momentum > 0 ? color.new(color.green, 70) : color.new(color.red, 70),
              text_color=color.white)
    table.cell(table_status, 2, 3, float_momentum > 0 ? "✓" : "✗", bgcolor=float_momentum > 0 ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    // WaveTrend状态
    table.cell(table_status, 0, 4, "WaveTrend", text_color=color.black)
    table.cell(table_status, 1, 4, float_wt1 > float_wt2 ? "UP" : "DOWN",
              bgcolor=float_wt1 > float_wt2 ? color.new(color.green, 70) : color.new(color.red, 70),
              text_color=color.white)
    table.cell(table_status, 2, 4, float_wt1 > float_wt2 ? "✓" : "✗", bgcolor=float_wt1 > float_wt2 ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    // EMA趋势
    table.cell(table_status, 0, 5, "EMA Trend", text_color=color.black)
    string_trendStatus = bool_useEMAFilter ? (bool_emaBullTrend ? "BULL" : "BEAR") : "OFF"
    table.cell(table_status, 1, 5, string_trendStatus,
              bgcolor=bool_useEMAFilter ? (bool_emaBullTrend ? color.new(color.green, 70) : color.new(color.red, 70)) : color.new(color.gray, 70),
              text_color=color.white)
    table.cell(table_status, 2, 5, bool_emaBullTrend ? "✓" : "✗", bgcolor=bool_emaBullTrend ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    // 成交量确认
    table.cell(table_status, 0, 6, "Volume", text_color=color.black)
    table.cell(table_status, 1, 6, str.tostring(volume/float_avgVolume, "#.##") + "x",
              bgcolor=bool_volumeConfirm ? color.new(color.green, 70) : color.new(color.red, 70),
              text_color=color.white)
    table.cell(table_status, 2, 6, bool_volumeConfirm ? "✓" : "✗", bgcolor=bool_volumeConfirm ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    // 信号层级统计
    table.cell(table_status, 0, 7, "Layer 1", text_color=color.black)
    table.cell(table_status, 1, 7, "SQZMOM", text_color=color.black)
    table.cell(table_status, 2, 7, bool_layer1_longSignal ? "✓" : "✗", bgcolor=bool_layer1_longSignal ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    table.cell(table_status, 0, 8, "Layer 2", text_color=color.black)
    table.cell(table_status, 1, 8, "+WT", text_color=color.black)
    table.cell(table_status, 2, 8, bool_layer2_longSignal ? "✓" : "✗", bgcolor=bool_layer2_longSignal ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    table.cell(table_status, 0, 9, "Layer 3", text_color=color.black)
    table.cell(table_status, 1, 9, "+EMA", text_color=color.black)
    table.cell(table_status, 2, 9, bool_layer3_longSignal ? "✓" : "✗", bgcolor=bool_layer3_longSignal ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    table.cell(table_status, 0, 10, "Layer 4", text_color=color.black)
    table.cell(table_status, 1, 10, "+VOL", text_color=color.black)
    table.cell(table_status, 2, 10, bool_layer4_longSignal ? "✓" : "✗", bgcolor=bool_layer4_longSignal ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)
    
    table.cell(table_status, 0, 11, "Final", text_color=color.black)
    table.cell(table_status, 1, 11, "Signal", text_color=color.black)
    table.cell(table_status, 2, 11, bool_longSignalFiltered ? "✓" : "✗", bgcolor=bool_longSignalFiltered ? color.new(color.green, 70) : color.new(color.red, 70), text_color=color.white)

// === 警报条件 ===
alertcondition(bool_longSignalFiltered, "Long Signal", "4S v1.6.1: Long signal detected!")
alertcondition(bool_shortSignalFiltered, "Short Signal", "4S v1.6.1: Short signal detected!")
alertcondition(bool_layer2_longSignal, "Basic Long Signal", "4S v1.6.1: Basic long signal (SQZMOM+WT)!")
alertcondition(bool_nearMissLong_EMA or bool_nearMissLong_Volume, "Near Miss Long", "4S v1.6.1: Near miss long signal!")
alertcondition(bool_reversalToLong or bool_reversalToShort, "Reversal Signal", "4S v1.6.1: Reversal signal detected!")