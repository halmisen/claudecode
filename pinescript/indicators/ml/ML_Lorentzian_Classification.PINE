// ⌘ SUMMARY:
// Type: indicator
// Purpose: Adaptive SuperTrend with Lorentzian Classification machine learning
// Key Inputs: SuperTrend parameters, K-means clustering settings, Lorentzian neighbors
// Outputs: Adaptive SuperTrend line, Lorentzian signals, bar coloring, prediction labels
// Functions: pine_supertrend(), K-means clustering, Lorentzian distance calculation
// Logic: Uses K-means to classify volatility, applies SuperTrend with adaptive ATR, adds ML-based signal classification

//@version=6
indicator('Adaptive SuperTrend + Lorentzian Classification', overlay=true, precision=4, max_labels_count=500)

import TradingView/ta/7
import jdehorty/MLExtensions/2 as ml
import jdehorty/KernelFunctions/2 as kernels

// === SuperTrend Inputs ===
atr_len1 = input.int(10, "ATR Length", group="SuperTrend | Settings")
fact1 = input.float(3.0, "SuperTrend Factor", group="SuperTrend | Settings")
training_data_period = input.int(100, "Training Data Length", group="SuperTrend | K-Means")
highvol = input.float(0.75, "High Volatility Percentile", maxval=1, group="SuperTrend | K-Means")
midvol = input.float(0.5, "Medium Volatility Percentile", maxval=1, group="SuperTrend | K-Means")
lowvol = input.float(0.25, "Low Volatility Percentile", maxval=1, group="SuperTrend | K-Means")
green1 = input.color(#00ffbb, "Bullish Color", group="SuperTrend | Appearance")
red1 = input.color(#ff1100, "Bearish Color", group="SuperTrend | Appearance")

// === SuperTrend Function ===
var int dir1 = 0
pine_supertrend(factor, atr) =>
    src = hl2
    upperBand = src + factor * atr
    lowerBand = src - factor * atr
    prevLowerBand = nz(lowerBand[1])
    prevUpperBand = nz(upperBand[1])

    lowerBand := lowerBand > prevLowerBand or close[1] < prevLowerBand ? lowerBand : prevLowerBand
    upperBand := upperBand < prevUpperBand or close[1] > prevUpperBand ? upperBand : prevUpperBand

    prevSuperTrend = nz(dir1[1]) == -1 ? prevUpperBand : prevLowerBand
    if na(atr[1])
        dir1 := 1
    else if prevSuperTrend == prevUpperBand
        dir1 := close > upperBand ? -1 : 1
    else
        dir1 := close < lowerBand ? 1 : -1

    superTrend = dir1 == -1 ? lowerBand : upperBand
    [superTrend, dir1]

// === SuperTrend Main ===
volatility = ta.atr(atr_len1)
upper = ta.highest(volatility, training_data_period)
lower = ta.lowest(volatility, training_data_period)
hv = lower + (upper - lower) * highvol
mv = lower + (upper - lower) * midvol
lv = lower + (upper - lower) * lowvol
vdist = array.from(math.abs(volatility - hv), math.abs(volatility - mv), math.abs(volatility - lv))
centroids = array.from(hv, mv, lv)
idx = array.indexof(vdist, array.min(vdist))
assigned_centroid = array.get(centroids, idx)

[ST, dir1] = pine_supertrend(fact1, assigned_centroid)
plot(ST, "SuperTrend", color = dir1 == -1 ? red1 : green1, style=plot.style_linebr)
plotshape(ta.crossunder(dir1, 0), "Bullish", shape.labelup, location.absolute, green1, "▲")
plotshape(ta.crossover(dir1, 0), "Bearish", shape.labeldown, location.absolute, red1, "▼")

// === Lorentzian Inputs ===
lc_neighbors = input.int(8, 'Neighbors Count', group='Lorentzian | Settings')
lc_maxbars = input.int(2000, 'Max Bars Back', group='Lorentzian | Settings')

// === Lorentzian Features ===
f1 = ml.n_rsi(close, 14, 1)
f2 = ml.n_wt(hlc3, 10, 11)
f3 = ml.n_cci(close, 20, 1)
f4 = ml.n_adx(high, low, close, 20)
f5 = ml.n_rsi(close, 9, 1)

var f1_array = array.new<float>()
var f2_array = array.new<float>()
var f3_array = array.new<float>()
var f4_array = array.new<float>()
var f5_array = array.new<float>()
array.unshift(f1_array, f1)
array.unshift(f2_array, f2)
array.unshift(f3_array, f3)
array.unshift(f4_array, f4)
array.unshift(f5_array, f5)

get_lorentzian_distance(i) =>
    math.log(1 + math.abs(f1 - array.get(f1_array, i))) +
    math.log(1 + math.abs(f2 - array.get(f2_array, i))) +
    math.log(1 + math.abs(f3 - array.get(f3_array, i))) +
    math.log(1 + math.abs(f4 - array.get(f4_array, i))) +
    math.log(1 + math.abs(f5 - array.get(f5_array, i)))

var int[] train_labels = array.new<int>()
label = close[4] < close ? -1 : close[4] > close ? 1 : 0
array.unshift(train_labels, label)

var distances = array.new<float>()
var predictions = array.new<int>()
lastDist = -1.0
size = math.min(lc_maxbars-1, array.size(train_labels)-1)

if bar_index >= lc_maxbars
    for i = 0 to size by 4
        d = get_lorentzian_distance(i)
        if d >= lastDist
            array.unshift(distances, d)
            array.unshift(predictions, array.get(train_labels, i))
            if array.size(predictions) > lc_neighbors
                lastDist := array.get(distances, int(lc_neighbors*3/4))
                array.pop(distances)
                array.pop(predictions)

prediction = array.sum(predictions)
signal = prediction > 0 ? 1 : prediction < 0 ? -1 : nz(signal[1])

lc_color = signal == 1 ? #009988 : signal == -1 ? #CC3311 : color.gray
barcolor(color.new(lc_color, 50))
label.new(bar_index, signal > 0 ? high : low, str.tostring(prediction),
          style=signal > 0 ? label.style_label_up : label.style_label_down,
          textcolor=color.white, color=color.new(lc_color, 50))

// === Alerts ===
alertcondition(ta.crossunder(dir1, 0), "SuperTrend Bullish Shift", "SuperTrend turned bullish")
alertcondition(ta.crossover(dir1, 0), "SuperTrend Bearish Shift", "SuperTrend turned bearish")
alertcondition(signal != signal[1], "Lorentzian Signal Change", "Lorentzian signal direction changed")
